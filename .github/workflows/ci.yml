name: CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '9.0.0'

jobs:
  lint-and-type-check:
    runs-on: ubuntu-latest
    
    steps:
      - name: 🚀 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 🗄️ Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Lint code
        run: pnpm lint

      - name: 🏗️ Build all packages
        run: pnpm build

      - name: 🔍 Type check
        run: pnpm type-check

      - name: ✅ Format check
        run: pnpm format:check

  test:
    runs-on: ubuntu-latest
    needs: lint-and-type-check
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 🚀 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build shared package
        run: pnpm turbo run build --filter=@sellyourwine/shared

      - name: 🗄️ Setup test database
        run: |
          cd apps/backend
          cp .env.example .env.test
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> .env.test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

      - name: 🧪 Run backend tests
        run: pnpm turbo run test --filter=@sellyourwine/backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

      - name: 🧪 Run frontend tests
        run: pnpm turbo run test --filter=@sellyourwine/frontend

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v4
        if: success()
        with:
          files: ./apps/backend/coverage/lcov.info,./apps/frontend/coverage/lcov.info
          fail_ci_if_error: false