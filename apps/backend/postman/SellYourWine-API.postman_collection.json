{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-4789-abcd-ef1234567890",
		"name": "SellYourWine API",
		"description": "Complete API collection for SellYourWine marketplace backend with authentication, cart management, and product catalog",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345678"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('access_token', response.access_token);",
									"    pm.environment.set('refresh_token', response.refresh_token);",
									"    pm.environment.set('user_id', response.user.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{test_email}}\",\n    \"password\": \"{{test_password}}\",\n    \"role\": \"buyer\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"register"
							]
						},
						"description": "Register a new user account"
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('access_token', response.access_token);",
									"    pm.environment.set('refresh_token', response.refresh_token);",
									"    pm.environment.set('user_id', response.user.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{test_email}}\",\n    \"password\": \"{{test_password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Login with existing user credentials"
					},
					"response": []
				},
				{
					"name": "Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('access_token', response.access_token);",
									"    pm.environment.set('refresh_token', response.refresh_token);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refresh_token\": \"{{refresh_token}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/refresh",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"refresh"
							]
						},
						"description": "Refresh access token using refresh token"
					},
					"response": []
				},
				{
					"name": "Logout",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refresh_token\": \"{{refresh_token}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"logout"
							]
						},
						"description": "Logout and revoke refresh token"
					},
					"response": []
				},
				{
					"name": "Forgot Password",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{test_email}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/forgot-password",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"forgot-password"
							]
						},
						"description": "Request password reset token"
					},
					"response": []
				},
				{
					"name": "Reset Password",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"{{reset_token}}\",\n    \"newPassword\": \"newPassword123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/reset-password",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"reset-password"
							]
						},
						"description": "Reset password using token"
					},
					"response": []
				},
				{
					"name": "Demo Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('access_token', response.access_token);",
									"    pm.environment.set('refresh_token', response.refresh_token);",
									"    pm.environment.set('user_id', response.user.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"role\": \"buyer\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/login-demo",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login-demo"
							]
						},
						"description": "Demo login without password (for testing)"
					},
					"response": []
				}
			],
			"description": "Authentication endpoints including JWT tokens and password reset"
		},
		{
			"name": "Cart Management",
			"item": [
				{
					"name": "Get Cart",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/cart",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cart"
							]
						},
						"description": "Get current user's cart (creates if doesn't exist)"
					},
					"response": []
				},
				{
					"name": "Add Item to Cart",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productId\": \"{{sample_product_id}}\",\n    \"quantity\": 2\n}"
						},
						"url": {
							"raw": "{{base_url}}/cart/items",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cart",
								"items"
							]
						},
						"description": "Add product to cart with specified quantity"
					},
					"response": []
				},
				{
					"name": "Update Cart Item Quantity",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"quantity\": 3\n}"
						},
						"url": {
							"raw": "{{base_url}}/cart/items/{{sample_product_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cart",
								"items",
								"{{sample_product_id}}"
							]
						},
						"description": "Update quantity of specific item in cart"
					},
					"response": []
				},
				{
					"name": "Remove Item from Cart",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/cart/items/{{sample_product_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cart",
								"items",
								"{{sample_product_id}}"
							]
						},
						"description": "Remove specific product from cart"
					},
					"response": []
				},
				{
					"name": "Clear Cart",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/cart",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cart"
							]
						},
						"description": "Remove all items from cart"
					},
					"response": []
				}
			],
			"description": "Shopping cart management with inventory checking"
		},
		{
			"name": "Products",
			"item": [
				{
					"name": "Get All Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const products = pm.response.json();",
									"    if (products.length > 0) {",
									"        pm.environment.set('sample_product_id', products[0].id);",
									"        pm.environment.set('sample_seller_id', products[0].sellerId);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "10",
									"disabled": true
								},
								{
									"key": "category",
									"value": "",
									"disabled": true
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Get all products with optional filtering and pagination"
					},
					"response": []
				},
				{
					"name": "Get Product by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/products/{{sample_product_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"{{sample_product_id}}"
							]
						},
						"description": "Get specific product details by ID"
					},
					"response": []
				},
				{
					"name": "Create Product (Seller)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Barolo DOCG 2018\",\n    \"vintage\": 2018,\n    \"grapes\": \"Nebbiolo\",\n    \"region\": \"Piemonte\",\n    \"alcoholPct\": 14.5,\n    \"description\": \"Elegant Barolo with complex tannins\",\n    \"priceCents\": 4500,\n    \"categoryId\": \"{{sample_category_id}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products"
							]
						},
						"description": "Create new product (requires seller role)"
					},
					"response": []
				},
				{
					"name": "Update Product (Seller)",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Updated Product Name\",\n    \"priceCents\": 2000,\n    \"description\": \"Updated description\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/products/{{sample_product_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"{{sample_product_id}}"
							]
						},
						"description": "Update existing product (owner only)"
					},
					"response": []
				},
				{
					"name": "Delete Product (Seller)",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/products/{{sample_product_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"{{sample_product_id}}"
							]
						},
						"description": "Delete product (owner only)"
					},
					"response": []
				}
			],
			"description": "Product catalog management"
		},
		{
			"name": "Categories",
			"item": [
				{
					"name": "Get All Categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const categories = pm.response.json();",
									"    if (categories.length > 0) {",
									"        pm.environment.set('sample_category_id', categories[0].id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/categories",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"categories"
							]
						},
						"description": "Get all product categories"
					},
					"response": []
				},
				{
					"name": "Get Category by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/categories/{{sample_category_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"categories",
								"{{sample_category_id}}"
							]
						},
						"description": "Get specific category details"
					},
					"response": []
				},
				{
					"name": "Create Category (Admin)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Vini Rossi\",\n    \"slug\": \"vini-rossi\",\n    \"parentId\": null\n}"
						},
						"url": {
							"raw": "{{base_url}}/categories",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"categories"
							]
						},
						"description": "Create new category (admin only)"
					},
					"response": []
				}
			],
			"description": "Product category management"
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "Create Order from Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const order = pm.response.json();",
									"    pm.environment.set('sample_order_id', order.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"shippingAddressId\": \"{{sample_address_id}}\",\n    \"billingAddressId\": \"{{sample_address_id}}\",\n    \"paymentMethod\": \"stripe\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/orders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders"
							]
						},
						"description": "Create order from current cart items"
					},
					"response": []
				},
				{
					"name": "Get My Orders",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/orders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders"
							],
							"query": [
								{
									"key": "status",
									"value": "paid",
									"disabled": true
								}
							]
						},
						"description": "Get current user's orders"
					},
					"response": []
				},
				{
					"name": "Get Order by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/orders/{{sample_order_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders",
								"{{sample_order_id}}"
							]
						},
						"description": "Get specific order details"
					},
					"response": []
				},
				{
					"name": "Update Order Status (Seller)",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"shipped\",\n    \"trackingNumber\": \"TRK123456789\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/orders/{{sample_order_id}}/status",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders",
								"{{sample_order_id}}",
								"status"
							]
						},
						"description": "Update order status and tracking"
					},
					"response": []
				}
			],
			"description": "Order management and fulfillment"
		},
		{
			"name": "Addresses",
			"item": [
				{
					"name": "Get My Addresses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const addresses = pm.response.json();",
									"    if (addresses.length > 0) {",
									"        pm.environment.set('sample_address_id', addresses[0].id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/addresses",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"addresses"
							]
						},
						"description": "Get current user's addresses"
					},
					"response": []
				},
				{
					"name": "Create Address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const address = pm.response.json();",
									"    pm.environment.set('sample_address_id', address.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fullName\": \"Mario Rossi\",\n    \"line1\": \"Via Roma 123\",\n    \"line2\": \"Appartamento 4B\",\n    \"city\": \"Milano\",\n    \"region\": \"Lombardia\",\n    \"postalCode\": \"20121\",\n    \"country\": \"IT\",\n    \"phone\": \"+39 333 1234567\",\n    \"isDefaultShipping\": true,\n    \"isDefaultBilling\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/addresses",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"addresses"
							]
						},
						"description": "Create new address for user"
					},
					"response": []
				},
				{
					"name": "Get Address by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/addresses/{{sample_address_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"addresses",
								"{{sample_address_id}}"
							]
						},
						"description": "Get specific address details"
					},
					"response": []
				},
				{
					"name": "Update Address",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"line1\": \"Via Milano 456\",\n    \"city\": \"Roma\",\n    \"postalCode\": \"00100\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/addresses/{{sample_address_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"addresses",
								"{{sample_address_id}}"
							]
						},
						"description": "Update existing address"
					},
					"response": []
				},
				{
					"name": "Delete Address",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/addresses/{{sample_address_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"addresses",
								"{{sample_address_id}}"
							]
						},
						"description": "Delete address"
					},
					"response": []
				}
			],
			"description": "User address management for shipping and billing"
		},
		{
			"name": "Sellers",
			"item": [
				{
					"name": "Get All Sellers",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/sellers",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sellers"
							]
						},
						"description": "Get all sellers in the marketplace"
					},
					"response": []
				},
				{
					"name": "Get Seller by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/sellers/{{sample_seller_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sellers",
								"{{sample_seller_id}}"
							]
						},
						"description": "Get specific seller details"
					},
					"response": []
				},
				{
					"name": "Create Seller Profile",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"displayName\": \"Cantina del Sole\",\n    \"iban\": \"IT60 X054 2811 1010 0000 0123 456\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/sellers",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sellers"
							]
						},
						"description": "Create seller profile for current user"
					},
					"response": []
				}
			],
			"description": "Seller management and profiles"
		},
		{
			"name": "Inventory",
			"item": [
				{
					"name": "Get Inventory Status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/inventory",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"inventory"
							],
							"query": [
								{
									"key": "productId",
									"value": "{{sample_product_id}}",
									"disabled": true
								}
							]
						},
						"description": "Get inventory status for products"
					},
					"response": []
				},
				{
					"name": "Set Inventory Quantity",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productId\": \"{{sample_product_id}}\",\n    \"quantity\": 50,\n    \"sku\": \"WINE-2024-001\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/inventory/set",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"inventory",
								"set"
							]
						},
						"description": "Set absolute inventory quantity"
					},
					"response": []
				},
				{
					"name": "Adjust Inventory Quantity",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productId\": \"{{sample_product_id}}\",\n    \"adjustment\": -5,\n    \"reason\": \"Sale completion\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/inventory/adjust",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"inventory",
								"adjust"
							]
						},
						"description": "Adjust inventory by relative amount"
					},
					"response": []
				}
			],
			"description": "Inventory tracking and management"
		},
		{
			"name": "Product Images",
			"item": [
				{
					"name": "Get Product Images",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/product-images?productId={{sample_product_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"product-images"
							],
							"query": [
								{
									"key": "productId",
									"value": "{{sample_product_id}}"
								}
							]
						},
						"description": "Get images for a specific product"
					},
					"response": []
				},
				{
					"name": "Add Product Image",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productId\": \"{{sample_product_id}}\",\n    \"url\": \"https://example.com/wine-image.jpg\",\n    \"position\": 1\n}"
						},
						"url": {
							"raw": "{{base_url}}/product-images",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"product-images"
							]
						},
						"description": "Add image to product (seller only)"
					},
					"response": []
				},
				{
					"name": "Delete Product Image",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/product-images/{{image_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"product-images",
								"{{image_id}}"
							]
						},
						"description": "Delete product image (seller only)"
					},
					"response": []
				}
			],
			"description": "Product image management"
		},
		{
			"name": "System",
			"item": [
				{
					"name": "Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"health"
							]
						},
						"description": "Check API health status"
					},
					"response": []
				}
			],
			"description": "System health and monitoring"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:3000",
			"type": "string"
		}
	]
}