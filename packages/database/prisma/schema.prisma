generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  username        String   @unique
  firstName       String?
  lastName        String?
  avatar          String?
  phone           String?
  verified        Boolean  @default(false)
  banned          Boolean  @default(false)
  role            UserRole @default(USER)
  googleId        String?
  facebookId      String?
  hashedPassword  String?
  bio             String?
  location        String?
  profileComplete Boolean  @default(false)

  // Seller rating cache
  sellerRating        Float? @default(0.0)
  sellerReviewCount   Int    @default(0)
  sellerResponseRate  Float? @default(0.0)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  wines                        Wine[]                      @relation("UserWines")
  ordersBuyer                  Order[]                     @relation("OrderBuyer")
  ordersSeller                 Order[]                     @relation("OrderSeller")
  reviewsGiven                 Review[]                    @relation("ReviewerReviews")
  reviewsReceived              Review[]                    @relation("TargetReviews")
  messages                     Message[]
  shippingAddresses            ShippingAddress[]
  conversationParticipants     ConversationParticipant[]
  wishlistItems                WishlistItem[]
  favoriteSellersByUser        FavoriteSeller[]            @relation("UserFavoriteSellers")
  favoriteSellersBySeller      FavoriteSeller[]            @relation("SellerFavorites")
  refundRequests               RefundRequest[]
  adminLogs                    AdminLog[]

  @@map("users")
}

model Wine {
  id             String        @id @default(cuid())
  title          String
  description    String
  price          Decimal       @db.Decimal(10, 2)
  annata         Int?
  region         String?
  country        String?
  producer       String?
  grapeVariety   String?
  alcoholContent Decimal?      @db.Decimal(4, 2)
  volume         Int?
  wineType       WineType
  condition      WineCondition @default(EXCELLENT)
  quantity       Int           @default(1)
  status         WineStatus    @default(ACTIVE)
  images         String[]
  sellerId       String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  soldAt         DateTime?

  // Relations
  seller       User           @relation("UserWines", fields: [sellerId], references: [id])
  orderItems   OrderItem[]
  reviews      Review[]
  wishlistItems WishlistItem[]

  @@map("wines")
}

model Order {
  id                 String           @id @default(cuid())
  orderNumber        String           @unique
  sellerId           String
  buyerId            String
  status             OrderStatus      @default(PENDING)
  subtotal           Decimal?         @db.Decimal(10, 2)
  shippingCost       Decimal?         @db.Decimal(10, 2)
  platformFee        Decimal?         @db.Decimal(10, 2)
  buyerProtectionFee Decimal?         @db.Decimal(10, 2)
  processingFee      Decimal?         @db.Decimal(10, 2)
  totalAmount        Decimal          @db.Decimal(10, 2)
  sellerPayout       Decimal?         @db.Decimal(10, 2)
  batchId            String?
  paymentId          String?
  paymentProvider    PaymentProvider?
  paymentStatus      PaymentStatus    @default(PENDING)
  shippingAddressId  String?
  trackingNumber     String?
  shippingLabelUrl   String?
  estimatedDelivery  DateTime?
  deliveredAt        DateTime?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  // Relations
  seller          User             @relation("OrderSeller", fields: [sellerId], references: [id])
  buyer           User             @relation("OrderBuyer", fields: [buyerId], references: [id])
  shippingAddress ShippingAddress? @relation(fields: [shippingAddressId], references: [id])
  orderItems      OrderItem[]
  messages        Message[]
  refundRequests  RefundRequest[]
  reviews         Review[]

  @@map("orders")
}

model OrderItem {
  id       String  @id @default(cuid())
  quantity Int     @default(1)
  price    Decimal @db.Decimal(10, 2)
  orderId  String
  wineId   String

  // Relations
  order Order @relation(fields: [orderId], references: [id])
  wine  Wine  @relation(fields: [wineId], references: [id])

  @@map("order_items")
}

model Review {
  id         String     @id @default(cuid())
  rating     Int        // Overall rating 1-5 stars
  comment    String?
  reviewerId String
  targetId   String
  orderId    String?    // Link to order being reviewed (optional for now due to DB migration issue)
  wineId     String?
  type       ReviewType @default(ORDER_REVIEW)

  // Seller response
  sellerResponse      String?
  sellerRespondedAt   DateTime?

  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  // Relations
  reviewer User  @relation("ReviewerReviews", fields: [reviewerId], references: [id])
  target   User  @relation("TargetReviews", fields: [targetId], references: [id])
  order    Order? @relation(fields: [orderId], references: [id])
  wine     Wine? @relation(fields: [wineId], references: [id])

  @@map("reviews")
}

model ShippingAddress {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  company   String?
  address1  String
  address2  String?
  city      String
  state     String?
  zipCode   String
  country   String
  phone     String?
  userId    String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User    @relation(fields: [userId], references: [id])
  orders Order[]

  @@map("shipping_addresses")
}

model Message {
  id             String       @id @default(cuid())
  content        String
  senderId       String
  conversationId String?
  orderId        String?
  messageType    MessageType  @default(TEXT)
  readAt         DateTime?
  createdAt      DateTime     @default(now())

  // Relations
  sender       User          @relation(fields: [senderId], references: [id])
  conversation Conversation? @relation(fields: [conversationId], references: [id])
  order        Order?        @relation(fields: [orderId], references: [id])

  @@map("messages")
}

model Conversation {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  participants ConversationParticipant[]
  messages     Message[]

  @@map("conversations")
}

model ConversationParticipant {
  id             String    @id @default(cuid())
  userId         String
  conversationId String
  joinedAt       DateTime  @default(now())
  leftAt         DateTime?

  // Relations
  user         User         @relation(fields: [userId], references: [id])
  conversation Conversation @relation(fields: [conversationId], references: [id])

  @@unique([userId, conversationId])
  @@map("conversation_participants")
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  wineId    String
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  wine Wine @relation(fields: [wineId], references: [id], onDelete: Cascade)

  @@unique([userId, wineId])
  @@map("wishlists")
}

model FavoriteSeller {
  id        String   @id @default(cuid())
  userId    String
  sellerId  String
  createdAt DateTime @default(now())

  // Relations
  user   User @relation("UserFavoriteSellers", fields: [userId], references: [id], onDelete: Cascade)
  seller User @relation("SellerFavorites", fields: [sellerId], references: [id], onDelete: Cascade)

  @@unique([userId, sellerId])
  @@map("favorite_sellers")
}

model RefundRequest {
  id          String       @id @default(cuid())
  reason      RefundReason
  details     String?
  amount      Decimal      @db.Decimal(10, 2)
  status      RefundStatus @default(PENDING)
  adminNotes  String?
  processedAt DateTime?
  orderId     String
  userId      String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  order Order @relation(fields: [orderId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@map("refund_requests")
}

model AdminLog {
  id         String      @id @default(cuid())
  action     AdminAction
  details    String?
  targetType String?
  targetId   String?
  adminId    String
  createdAt  DateTime    @default(now())

  // Relations
  admin User @relation(fields: [adminId], references: [id])

  @@map("admin_logs")
}

// Enums
enum AdminAction {
  USER_BANNED
  USER_UNBANNED
  USER_VERIFIED
  WINE_APPROVED
  WINE_REJECTED
  WINE_UPDATED
  ORDER_CANCELLED
  ORDER_UPDATED
  REFUND_APPROVED
  REFUND_DENIED
  MESSAGE_DELETED
  OTHER
}

enum MessageType {
  TEXT
  IMAGE
  SYSTEM
  ORDER_UPDATE
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  DISPUTED
}

enum PaymentProvider {
  PAYPAL
  STRIPE
  ESCROW
  NEXI_PAY
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum RefundReason {
  DAMAGED_ITEM
  ITEM_NOT_RECEIVED
  ITEM_NOT_AS_DESCRIBED
  CHANGED_MIND
  SELLER_CANCELLED
  OTHER
}

enum RefundStatus {
  PENDING
  APPROVED
  DENIED
  PROCESSED
  COMPLETED
}

enum ReviewType {
  USER_REVIEW
  WINE_REVIEW
  ORDER_REVIEW
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum WineCondition {
  MINT
  EXCELLENT
  VERY_GOOD
  GOOD
  FAIR
  POOR
}

enum WineStatus {
  ACTIVE
  SOLD
  RESERVED
  INACTIVE
}

enum WineType {
  RED
  WHITE
  ROSE
  SPARKLING
  DESSERT
  FORTIFIED
  OTHER
}
